name: CI/CD Pipeline

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: rainlo_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.2'
        extensions: mbstring, dom, fileinfo, mysql, gd, bcmath

    - name: Install dependencies
      run: composer install --prefer-dist --no-progress

    - name: Copy environment file
      run: cp .env.example .env

    - name: Generate application key
      run: php artisan key:generate

    - name: Set database environment
      run: |
        echo "DB_CONNECTION=mysql" >> .env
        echo "DB_HOST=127.0.0.1" >> .env
        echo "DB_PORT=3306" >> .env
        echo "DB_DATABASE=rainlo_test" >> .env
        echo "DB_USERNAME=root" >> .env
        echo "DB_PASSWORD=password" >> .env

    - name: Run migrations
      run: php artisan migrate --force

    - name: Run tests
      run: php artisan test

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    permissions:
      contents: read
      packages: write

    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

    - name: Output image
      id: image
      run: |
        echo "image=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_OUTPUT

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    environment: production

    steps:
    - name: Deploy to home server
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        key: ${{ secrets.SSH_KEY }}
        port: ${{ secrets.PORT }}
        timeout: 300s
        command_timeout: 60s
        script: |
          # Navigate to deployment directory
          cd /opt/rainlo

          # Pull latest image
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          docker pull ${{ needs.build-and-push.outputs.image }}

          # Update docker-compose to use new image
          export IMAGE_TAG=${{ needs.build-and-push.outputs.image }}
          export APP_KEY="${{ secrets.APP_KEY }}"
          export DB_PASSWORD="${{ secrets.DB_PASSWORD }}"
          export MYSQL_ROOT_PASSWORD="${{ secrets.MYSQL_ROOT_PASSWORD }}"

          # Stop current containers
          docker-compose -f docker-compose.prod.yml down || true

          # Start with new image
          docker-compose -f docker-compose.prod.yml up -d

          # Wait for services to be ready
          sleep 30

          # Run migrations
          docker-compose -f docker-compose.prod.yml exec -T app php artisan migrate --force

          # Clear and cache config
          docker-compose -f docker-compose.prod.yml exec -T app php artisan config:clear
          docker-compose -f docker-compose.prod.yml exec -T app php artisan config:cache
          docker-compose -f docker-compose.prod.yml exec -T app php artisan route:cache

          # Test the deployment
          if curl -f -s http://localhost:8080/api/health > /dev/null; then
            echo "✅ Deployment successful! API is responding."
            echo "🌐 API available at: https://api.rainlo.app"
          else
            echo "❌ Deployment failed - API not responding"
            exit 1
          fi

          # Run migrations
          docker-compose -f docker-compose.prod.yml exec -T app php artisan migrate --force

          # Health check
          curl -f http://localhost:8080/up || exit 1

          echo "✅ Deployment completed successfully!"
